import java.awt.*;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;


public class BirthdayParadox{
    private static java.util.Random generator = new java.util.Random();
    public static Statistics runExperiments(int range, int numberOfRuns){

        Statistics s = new Statistics(numberOfRuns);
        for (int i = 0; i < numberOfRuns ; i++)
        {
            int temp = oneRun(range);
            s.updateStatistics(temp);
        }
        return s;
    }
    private static int oneRun(int range){
        boolean[] Visited = new boolean[range];
        int count =0 ;

        for (int i = 0 ; i < range ; i++)
        {
            Visited[i] = false;
        }
        while(true) {
            int rand = generator.nextInt(range - 1);
            if (!Visited[rand]) {
                count += 1;
                Visited[rand] = true;
            } else {
                return count;
            }
        }

    }
    public static void CreateWindow(XYSeriesCollection dataset, XYSeriesCollection dataset1)
    {
        JFreeChart chart = ChartFactory.createXYLineChart("Average vs Size" , "Size" , "Average" ,dataset, PlotOrientation.VERTICAL, true, true , true);
        JFreeChart chart1 = ChartFactory.createXYLineChart("Standard Deviation vs Size" , "Size" , "Standard Deviation " ,dataset1, PlotOrientation.VERTICAL, true, true , true);
        ChartPanel chartPanel = new ChartPanel( chart );
        ChartPanel chartPane2 = new ChartPanel( chart1 );

        chartPanel.setPreferredSize( new java.awt.Dimension( 500 , 500 ) );
        chartPane2.setPreferredSize( new java.awt.Dimension( 500 , 500 ) );

        JFrame f = new JFrame("Stats");
        f.getContentPane().add(chartPanel, BorderLayout.WEST);
        f.getContentPane().add(chartPane2, BorderLayout.EAST);
        f.pack();
        f.setVisible(true);

    }
    public static void main(String[] args)
    {
        XYSeries AverageChartSeries = new XYSeries("Average");
        XYSeries DeviationChartSeries = new XYSeries("Deviation");
        int step = 0;
        int runs = 0;
        int limit = 0 ;
        if(args.length == 0)
        {
            step = 100;
            runs = 1000;
            limit = 10000;
        }
        else if( args.length == 3)
        {
            step = Integer.parseInt(args[0]);
            limit = Integer.parseInt(args[1]);
            runs = Integer.parseInt(args[2]);
        }
        for (int size = step ; size <= limit ; size+=step) {
            System.out.println("Set size:" + size);
            System.out.println(runExperiments(size, runs).toString());
            AverageChartSeries.add(size , runExperiments(size, runs).average());
            DeviationChartSeries.add(size ,runExperiments(size, runs).standardDeviation());

        }
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeriesCollection dataset1 = new XYSeriesCollection();
        dataset.addSeries(AverageChartSeries);
        dataset1.addSeries(DeviationChartSeries);
        CreateWindow(dataset, dataset1); 

    }

}

class Statistics {
    private int Minimum;
    private int Maximum;
    private int [] results;
    private int sum ;
    private int count ;
    private int track;

    public Statistics(int numberOfRuns){
        this.Minimum = Integer.MAX_VALUE;
        this.Maximum = 0;
        this.results = new int[numberOfRuns];
        this.count = numberOfRuns;
        this.track = 0;

    }
    public void updateStatistics(int value){

        if (value > this.Maximum)
        {
            this.Maximum = value;
        }
        if (value < this.Minimum)
        {
            this.Minimum = value;
        }
        this.sum += value;
        this.results[this.track] = value;
        this.track++;
    }

    public double average(){
        return this.sum / this.count ;
    }

    public double standardDeviation(){
        double Sum =0 ;
        double avg = this.average();
        for (int i=0 ; i < this.results.length ; i++)
        {
            Sum += Math.pow(this.results[i] - avg , 2);
        }
        return Math.sqrt(Sum / this.count);
    }

    public String toString(){

        return "Minimum: " + this.Minimum +"\nMaximum: " + this.Maximum +"\nAverage: " + String.format("%.2f", this.average()) +"\nStandard Deviation: " + String.format("%.2f" ,this.standardDeviation());
    }
}
